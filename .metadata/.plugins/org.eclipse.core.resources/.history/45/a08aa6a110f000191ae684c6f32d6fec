/*
 * mfrc522.c
 *
 *  Created on: Oct 15, 2019
 *      Author: eslamelnaggar
 */


/*----------------------------------------INCLUDES-----------------------------------------------*/

#include <mfrc522.h> /* include header file of MFRC522 device */


/*------------------------------------FUNCTION DEFINITIONS--------------------------------------*/

/*----------------------------------------------------------------------------------------------------
 [Function Name]:  MFRC522_init
 [Description]  :  This function is responsible for initializing MFRC522
 [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/

void MFRC522_init(const MFRC522_configType * MFRC522_configType_Ptr)
{
	uint8 Byte = 0;
	MFRC522_reset();
	/* setting TmodeRegister */
	Byte = ( Byte ) | ((MFRC522_configType_Ptr->TmodeRegister_config->timerAuto & 0b00000001)<<TAuto);
	Byte = ( Byte ) | ((MFRC522_configType_Ptr->TmodeRegister_config->gatedMode & 0b00000011)<<TGated);
	Byte = ( Byte ) | ((MFRC522_configType_Ptr->TmodeRegister_config->autoRestart & 0b00000001)<<TAutoRestart);
	Byte = ( Byte ) | (((uint8)((MFRC522_configType_Ptr->TmodeRegister_config->prescaler & 0x0100)>>8))<<TAuto);
	MFRC522_writeByte(TModeReg, Byte);

	Byte = 0;
	/* setting modeRegister */

	Byte = ( Byte ) | ((MFRC522_configType_Ptr->modeReg_config->MSB_mode      & 0b00000001)<<MSBFirst);
	Byte = ( Byte ) | ((MFRC522_configType_Ptr->modeReg_config->TxWaitRF_mode & 0b00000001)<<TxWaitRF);
	Byte = ( Byte ) | ((MFRC522_configType_Ptr->modeReg_config->PollMFin_mode & 0b00000001)<<PollMFin);
	Byte = ( Byte ) | ((MFRC522_configType_Ptr->modeReg_config->CRC_mode      & 0b00000011)<<CRCPreset);

	MFRC522_writeByte(ModeReg, Byte);

	Byte = 0;

	Byte = Byte | (uint8)((MFRC522_configType_Ptr->TmodeRegister_config->prescaler & 0x0011));

	MFRC522_writeByte(TPrescalerReg, Byte);

	Byte = 0;

	Byte = Byte | (uint8)(((MFRC522_configType_Ptr->TmodeRegister_config->TreloadReg_regValue & 0x1100)>>8));

	MFRC522_writeByte(TReloadReg_1, Byte);

	Byte = 0;

	Byte = Byte | (uint8)((MFRC522_configType_Ptr->TmodeRegister_config->TreloadReg_regValue & 0x0011));

	MFRC522_writeByte(TReloadReg_2, Byte);

	Byte = 0;

	Byte = Byte | ((MFRC522_configType_Ptr->TmodeRegister_config->transmitModulation & 0b00000001)<<Force100ASK);

	MFRC522_writeByte(TxASKReg, Byte);

	Byte = mfrc522_readByte(TxControlReg);
		if(!(Byte& 0b00000011))
		{
			mfrc522_write(TxControlReg,Byte|0x03);
		}


}


uint8 MFRC522_readByte(uint8_t a_register)
{
	uint8 data;
	//ENABLE_CHIP();
	SPI_sendByte(((a_register<<1)&0x7E)|0x80);
	data = SPI_sendByte(0x00);
	//DISABLE_CHIP();
	return data;
}


void MFRC522_reset()
{
	MFRC522_write(COMMAND_REG,SOFT_RESET_COMMAND);
}

void MFRC522_writeByte(uint8 a_register, uint8 a_data)
{
	//ENABLE_CHIP();
	SPI_sendByte((a_register<<1)&0b01111110);
	SPI_sendByte(a_data);
	//DISABLE_CHIP();
}



