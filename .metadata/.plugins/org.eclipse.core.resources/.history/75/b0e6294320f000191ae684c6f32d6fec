/*
 * mfrc522.c
 *
 *  Created on: Oct 15, 2019
 *      Author: eslamelnaggar
 */


/*----------------------------------------INCLUDES-----------------------------------------------*/

#include <mfrc522.h> /* include header file of MFRC522 device */


/*------------------------------------FUNCTION DEFINITIONS--------------------------------------*/

/*----------------------------------------------------------------------------------------------------
 [Function Name]:  MFRC522_init
 [Description]  :  This function is responsible for initializing MFRC522
 [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/

void MFRC522_init(const MFRC522_configType * MFRC522_configType_Ptr)
{
	uint8 Byte = 0;
	MFRC522_reset();
	/* setting TmodeRegister */
	Byte = ( Byte ) | ((MFRC522_configType_Ptr->TmodeRegister_config->timerAuto & 0b00000001)<<TAuto);
	Byte = ( Byte ) | ((MFRC522_configType_Ptr->TmodeRegister_config->gatedMode & 0b00000011)<<TGated);
	Byte = ( Byte ) | ((MFRC522_configType_Ptr->TmodeRegister_config->autoRestart & 0b00000001)<<TAutoRestart);
	Byte = ( Byte ) | (((uint8)((MFRC522_configType_Ptr->TmodeRegister_config->prescaler & 0x0100)>>8))<<TAuto);
	MFRC522_writeByte(TModeReg, Byte);

	Byte = 0;
	/* setting modeRegister */

	Byte = ( Byte ) | ((MFRC522_configType_Ptr->modeReg_config->MSB_mode      & 0b00000001)<<MSBFirst);
	Byte = ( Byte ) | ((MFRC522_configType_Ptr->modeReg_config->TxWaitRF_mode & 0b00000001)<<TxWaitRF);
	Byte = ( Byte ) | ((MFRC522_configType_Ptr->modeReg_config->PollMFin_mode & 0b00000001)<<PollMFin);
	Byte = ( Byte ) | ((MFRC522_configType_Ptr->modeReg_config->CRC_mode      & 0b00000011)<<CRCPreset);

	MFRC522_writeByte(ModeReg, Byte);

	Byte = 0;

	Byte = Byte | (uint8)((MFRC522_configType_Ptr->TmodeRegister_config->prescaler & 0x0011));

	MFRC522_writeByte(TPrescalerReg, Byte);

	Byte = 0;

	Byte = Byte | (uint8)(((MFRC522_configType_Ptr->TmodeRegister_config->TreloadReg_regValue & 0x1100)>>8));

	MFRC522_writeByte(TReloadReg_1, Byte);

	Byte = 0;

	Byte = Byte | (uint8)((MFRC522_configType_Ptr->TmodeRegister_config->TreloadReg_regValue & 0x0011));

	MFRC522_writeByte(TReloadReg_2, Byte);

	Byte = 0;

	Byte = Byte | ((MFRC522_configType_Ptr->TmodeRegister_config->transmitModulation & 0b00000001)<<Force100ASK);

	MFRC522_writeByte(TxASKReg, Byte);

	Byte = mfrc522_readByte(TxControlReg);
		if(!(Byte& 0b00000011))
		{
			MFRC522_writeByte(TxControlReg,Byte| 0x03); /* setting output signal on TX1 and TX2 */
		}

}


uint8 MFRC522_readByte(uint8_t a_register)
{
	uint8 data;
	//ENABLE_CHIP();
	SPI_sendByte(((a_register<<1)&0x7E)|0x80);
	data = SPI_sendByte(0x00);
	//DISABLE_CHIP();
	return data;
}


void MFRC522_reset()
{
	MFRC522_writeByte(COMMAND_REG,SOFT_RESET_COMMAND);
}

void MFRC522_writeByte(uint8 a_register, uint8 a_data)
{
	//ENABLE_CHIP();
	SPI_sendByte((a_register<<1)&0b01111110);
	SPI_sendByte(a_data);
	//DISABLE_CHIP();
}

uint8_t mfrc522_to_card(uint8 command, uint8 *send_data, uint8 send_data_len, uint8 *back_data, uint32 *back_data_len, uint16 waitingTime)
{
	uint8 statusProcess;
    uint8 irqEn;
    uint8 waitIRq;
    uint8 lastBits;
    uint8 recievedByte;
    uint8 tmp;
    uint32 waitingResponseTimeCounter;

    switch (command)
    {
        case MF_AUTHENET_COMMAND:		//Certification cards close
		{
			/*
			 * command terminates by itself and any error occurs
			 */
			irqEn = 0b00010010;
			/*
			 * all interrupts requests are set
			 */
			waitIRq = 0x10;
			break;
		}
		case TRANSCEIVE_COMMAND:	//Transmit FIFO data
		{
			/*
			 * the last bit of the transmitted data was sent out and
			 * the reciever  detects the end of the valid data stream and
			 * command terminates by itself and any error occurs and
			 * if any error but in the error register is set and
			 * the timer decrements to zero
			 */
			irqEn =  0b01110111;
			/*
			 * the reciever  detects the end of the valid data stream and
			 * the command terminates by its self
			 */
			waitIRq = 0b00110000;
			break;
		}
		default:
			break;
    }

    recievedByte=MFRC522_readByte(ComIrqReg);

    /* clear all interrupt request pins */
    MFRC522_writeByte(ComIrqReg,CLEAR_BIT(recievedByte,7));
    recievedByte=MFRC522_readByte(FIFOLevelReg);

    /* flush FIFO data */
    MFRC522_writeByte(FIFOLevelReg,SET_BIT(recievedByte,7));


    /* sending IDLE command to end current command */
	MFRC522_writeByte(COMMAND_REG, IDLE_COMMAND);

	/* Writing data to the FIFO */
    for (waitingResponseTimeCounter=0; waitingResponseTimeCounter<send_data_len; waitingResponseTimeCounter++)
    {
		MFRC522_writeByte(FIFODataReg, send_data[waitingResponseTimeCounter]);
	}

	/* starting excuting the command */
	MFRC522_writeByte(COMMAND_REG, command);


    if (command == TRANSCEIVE_COMMAND)
    {
		recievedByte=MFRC522_readByte(BitFramingReg);

		/* start transmission of data */
		MFRC522_writeByte(BitFramingReg,SET_BIT(recievedByte,7));
	}

	/* time to wait for response */
	waitingResponseTimeCounter = waitingTime;
    do
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        recievedByte = MFRC522_readByte(ComIrqReg);
        waitingResponseTimeCounter--;
    }
    while ((waitingResponseTimeCounter!=0) && !(recievedByte&0x01) && !(recievedByte&waitIRq));

	tmp=MFRC522_readByte(BitFramingReg);
	MFRC522_writeByte(BitFramingReg,tmp&(~0x80));

    if (waitingResponseTimeCounter != 0)
    {
        if(!(MFRC522_readByte(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
        {
            statusProcess = CARD_FOUND;
            if (recievedByte & irqEn & 0x01)
            {
				statusProcess = CARD_NOT_FOUND;			//??
			}

            if (command == TRANSCEIVE_COMMAND)
            {
               	recievedByte = MFRC522_readByte(FIFOLevelReg);
              	lastBits = MFRC522_readByte(ControlReg) & 0x07;
                if (lastBits)
                {
					*back_data_len = (recievedByte-1)*8 + lastBits;
				}
                else
                {
					*back_data_len = recievedByte*8;
				}

                if (recievedByte == 0)
                {
					recievedByte = 1;
				}
                if (recievedByte > MAX_LEN)
                {
					recievedByte = MAX_LEN;
				}

				//Reading the received data in FIFO
                for (waitingResponseTimeCounter=0; waitingResponseTimeCounter<recievedByte; waitingResponseTimeCounter++)
                {
					back_data[waitingResponseTimeCounter] = MFRC522_readByte(FIFODataReg);
				}
            }
        }
        else
        {
			statusProcess = ERROR;
		}

    }

    //SetBitMask(ControlReg,0x80);           //timer stops
    //MFRC522_writeByte(cmdReg, PCD_IDLE);

    return statusProcess;
}



